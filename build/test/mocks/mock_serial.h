/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_SERIAL_H
#define _MOCK_SERIAL_H

#include "serial.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#pragma GCC diagnostic push
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_serial_Init(void);
void mock_serial_Destroy(void);
void mock_serial_Verify(void);




#define Ser_Init_Ignore() Ser_Init_CMockIgnore()
void Ser_Init_CMockIgnore(void);
#define Ser_Init_Expect() Ser_Init_CMockExpect(__LINE__)
void Ser_Init_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_Ser_Init_CALLBACK)(int cmock_num_calls);
void Ser_Init_StubWithCallback(CMOCK_Ser_Init_CALLBACK Callback);
#define Ser_Start_Ignore() Ser_Start_CMockIgnore()
void Ser_Start_CMockIgnore(void);
#define Ser_Start_Expect(disable) Ser_Start_CMockExpect(__LINE__, disable)
void Ser_Start_CMockExpect(UNITY_LINE_TYPE cmock_line, UINT8 disable);
typedef void (* CMOCK_Ser_Start_CALLBACK)(UINT8 disable, int cmock_num_calls);
void Ser_Start_StubWithCallback(CMOCK_Ser_Start_CALLBACK Callback);
#define Ser_Update_Ignore() Ser_Update_CMockIgnore()
void Ser_Update_CMockIgnore(void);
#define Ser_Update_Expect() Ser_Update_CMockExpect(__LINE__)
void Ser_Update_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_Ser_Update_CALLBACK)(int cmock_num_calls);
void Ser_Update_StubWithCallback(CMOCK_Ser_Update_CALLBACK Callback);
#define Ser_PutString_Ignore() Ser_PutString_CMockIgnore()
void Ser_PutString_CMockIgnore(void);
#define Ser_PutString_Expect(str) Ser_PutString_CMockExpect(__LINE__, str)
void Ser_PutString_CMockExpect(UNITY_LINE_TYPE cmock_line, char* str);
typedef void (* CMOCK_Ser_PutString_CALLBACK)(char* str, int cmock_num_calls);
void Ser_PutString_StubWithCallback(CMOCK_Ser_PutString_CALLBACK Callback);
#define Ser_PutStringFormat_Ignore() Ser_PutStringFormat_CMockIgnore()
void Ser_PutStringFormat_CMockIgnore(void);
#define Ser_PutStringFormat_Expect(fmt) Ser_PutStringFormat_CMockExpect(__LINE__, fmt)
void Ser_PutStringFormat_CMockExpect(UNITY_LINE_TYPE cmock_line, const char* fmt);
typedef void (* CMOCK_Ser_PutStringFormat_CALLBACK)(const char* fmt, int cmock_num_calls);
void Ser_PutStringFormat_StubWithCallback(CMOCK_Ser_PutStringFormat_CALLBACK Callback);
#define Ser_ReadData_IgnoreAndReturn(cmock_retval) Ser_ReadData_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void Ser_ReadData_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UINT8 cmock_to_return);
#define Ser_ReadData_ExpectAndReturn(data, cmock_retval) Ser_ReadData_CMockExpectAndReturn(__LINE__, data, cmock_retval)
void Ser_ReadData_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, UINT8* data, UINT8 cmock_to_return);
typedef UINT8 (* CMOCK_Ser_ReadData_CALLBACK)(UINT8* data, int cmock_num_calls);
void Ser_ReadData_StubWithCallback(CMOCK_Ser_ReadData_CALLBACK Callback);
#define Ser_ReadByte_IgnoreAndReturn(cmock_retval) Ser_ReadByte_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void Ser_ReadByte_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UINT8 cmock_to_return);
#define Ser_ReadByte_ExpectAndReturn(cmock_retval) Ser_ReadByte_CMockExpectAndReturn(__LINE__, cmock_retval)
void Ser_ReadByte_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, UINT8 cmock_to_return);
typedef UINT8 (* CMOCK_Ser_ReadByte_CALLBACK)(int cmock_num_calls);
void Ser_ReadByte_StubWithCallback(CMOCK_Ser_ReadByte_CALLBACK Callback);
#define Ser_ReadLine_IgnoreAndReturn(cmock_retval) Ser_ReadLine_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void Ser_ReadLine_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UINT8 cmock_to_return);
#define Ser_ReadLine_ExpectAndReturn(line, echo, cmock_retval) Ser_ReadLine_CMockExpectAndReturn(__LINE__, line, echo, cmock_retval)
void Ser_ReadLine_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* line, UINT8 echo, UINT8 cmock_to_return);
typedef UINT8 (* CMOCK_Ser_ReadLine_CALLBACK)(char* line, UINT8 echo, int cmock_num_calls);
void Ser_ReadLine_StubWithCallback(CMOCK_Ser_ReadLine_CALLBACK Callback);
#define Ser_WriteByte_Ignore() Ser_WriteByte_CMockIgnore()
void Ser_WriteByte_CMockIgnore(void);
#define Ser_WriteByte_Expect(value) Ser_WriteByte_CMockExpect(__LINE__, value)
void Ser_WriteByte_CMockExpect(UNITY_LINE_TYPE cmock_line, UINT8 value);
typedef void (* CMOCK_Ser_WriteByte_CALLBACK)(UINT8 value, int cmock_num_calls);
void Ser_WriteByte_StubWithCallback(CMOCK_Ser_WriteByte_CALLBACK Callback);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#pragma GCC diagnostic pop
#endif

#endif
